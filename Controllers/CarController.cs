using HonestAuto.Data;
using HonestAuto.Models;
using HonestAuto.Models.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using System;
using System.Linq;
using System.Threading.Tasks;

//AutoGenerated
namespace HonestAuto.Controllers
{
    public class CarController : Controller
    {
        private readonly MarketplaceContext _context;

        public CarController(MarketplaceContext context)
        {
            _context = context;
            // Constructor for CarController that takes an instance of MarketplaceContext.
        }

        // INDEX (Read/List all)
        public async Task<IActionResult> Index()
        {
            var viewModelList = await _context.Cars
                .Select(car => new CarAndEvaluationViewModel
                {
                    Car = car,
                    CarEvaluation = car.CarEvaluations
                                     .OrderBy(ce => ce.EvaluationDate)
                                     .FirstOrDefault()
                })// Broken but WIP https://stackoverflow.com/questions/22368726/how-to-combine-two-models-into-a-single-model-and-pass-it-to-view-using-asp-net
                .ToListAsync();

            return View(viewModelList);
            // Retrieve all cars and their associated evaluations, create a view model for each, and return them as a list to the view.
        }

        // CREATE (GET)
        [HttpGet]
        public IActionResult Create()
        {
            var viewModel = new CarAndEvaluationViewModel
            {
                Car = new Car(),
                CarEvaluation = new CarEvaluation()
            };
            //https://stackoverflow.com/questions/22368726/how-to-combine-two-models-into-a-single-model-and-pass-it-to-view-using-asp-net
            return View(viewModel);
            // Display the Create view for creating a new car and associated evaluation.
        }

        // CREATE (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CarAndEvaluationViewModel viewModel)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    // Add the Car object to the database context
                    _context.Cars.Add(viewModel.Car);

                    // Save changes to get the CarID for the new Car
                    await _context.SaveChangesAsync();

                    // Set CarID for CarEvaluation from the hidden field
                    viewModel.CarEvaluation.CarID = viewModel.Car.CarID;

                    // Add CarEvaluation to the context
                    _context.CarEvaluations.Add(viewModel.CarEvaluation);

                    // Save changes for CarEvaluation
                    await _context.SaveChangesAsync();

                    // Redirect to the Index action of the User controller after successfully creating
                    return RedirectToAction("Index", "User");
                }
                catch (Exception ex)
                {
                    // Log and handle the exception appropriately
                    ModelState.AddModelError("", "An error occurred while saving the car and evaluation");
                }
            }

            return View(viewModel);
            // If the model state is not valid, return the Create view with validation errors.
        }

        // EDIT (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, CarAndEvaluationViewModel viewModel)
        {
            if (id != viewModel.Car.CarID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    // Update the Car and CarEvaluation properties in the context
                    _context.Update(viewModel.Car);
                    _context.Update(viewModel.CarEvaluation);

                    // Save changes to the database
                    await _context.SaveChangesAsync();

                    // Redirect to the Index action after successfully updating
                    return RedirectToAction(nameof(Index));
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CarExists(id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
            }

            // If ModelState is not valid, return to the Edit view with validation errors
            return View(viewModel);
        }

        private bool CarExists(int id)
        {
            return _context.Cars.Any(e => e.CarID == id);
        }
    }
}