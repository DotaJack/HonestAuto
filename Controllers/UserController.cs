using HonestAuto.Data;
using HonestAuto.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Linq;

namespace HonestAuto.Controllers
{//Auto-Generated by Visual Studio and partially edited by me
    public class UserController : Controller
    {
        private readonly MarketplaceContext _context;

        public UserController(MarketplaceContext context)
        {
            _context = context;
            // Constructor for UserController that takes an instance of MarketplaceContext.
        }

        // INDEX (Read/List all)
        public async Task<IActionResult> Index()
        {
            var users = await _context.Users.ToListAsync();
            // Retrieve all users from the database and convert them to a list.
            return View(users);
            // Return a view with the list of users.
        }

        // CREATE (GET)
        [HttpGet]
        public IActionResult Create()
        {
            return View();
            // Display the Create view for creating a new user.
        }

        // CREATE (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("UserID,FirstName,LastName,Email,PhoneNumber,Password,Address,Role")] User user)
        {
            if (ModelState.IsValid)
            {
                _context.Add(user);
                await _context.SaveChangesAsync();
                // If the model is valid, add the user to the database and save changes.
                return RedirectToAction(nameof(Index));
                // Redirect to the Index action after successfully creating the user.
            }
            return View(user);
            // If the model is not valid, return the Create view with validation errors.
        }

        // EDIT (GET)
        [HttpGet]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }
            return View(user);
            // Display the Edit view for editing an existing user.
        }

        // EDIT (POST)
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("UserID,FirstName,LastName,Email,PhoneNumber,Password,Address,Role")] User user)
        {
            if (id != user.UserID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(user);
                    await _context.SaveChangesAsync();
                    // If the model is valid, update the user in the database and save changes.
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!UserExists(user.UserID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
                // Redirect to the Index action after successfully editing the user.
            }
            return View(user);
            // If the model is not valid, return the Edit view with validation errors.
        }

        // DELETE (GET)
        [HttpGet]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var user = await _context.Users.FirstOrDefaultAsync(m => m.UserID == id);
            if (user == null)
            {
                return NotFound();
            }
            return View(user);
            // Display the Delete view for deleting an existing user.
        }

        // DELETE (POST/Confirmed)
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user != null)
            {
                _context.Users.Remove(user);
                await _context.SaveChangesAsync();
                // Remove the user from the database and save changes.
            }
            return RedirectToAction(nameof(Index));
            // Redirect to the Index action after successfully deleting the user.
        }

        private bool UserExists(int id)
        {
            return _context.Users.Any(e => e.UserID == id);
            // Check if a user with the given ID exists in the database.
        }
    }
}